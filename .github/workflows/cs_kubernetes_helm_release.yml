name: Release Charts

on:
  push:
    branches:
      - test_releases
    paths:
      - 'charts/cloud-security/**'

jobs:
  release:
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: Install Chart Releaser
        run: |
          CR_VERSION="v1.8.1"
          curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/${CR_VERSION}/chart-releaser_${CR_VERSION}_linux_amd64.tar.gz"
          tar -xzf cr.tar.gz
          chmod +x cr
          sudo mv cr /usr/local/bin/
      - name: Create Work Directories
        run: |
          mkdir -p .cr-index
          mkdir -p .chart-scan-tmp

      - name: Package Charts
        id: chart_releaser
        run: |
          # Find all charts that have changed
          CHANGED_CHARTS=()
          for chart in charts/cloud-security/*; do
            if [ -d "$chart" ]; then
              # Check if chart files have changed
              if git diff --name-only HEAD^ HEAD | grep -q "^$chart/"; then
                CHART_NAME=$(basename "$chart")
                CHANGED_CHARTS+=("$CHART_NAME")
                
                # Package the chart
                helm package "$chart" -d releases/
              fi
            fi
          done
          
          # Set output with changed charts
          if [ ${#CHANGED_CHARTS[@]} -gt 0 ]; then
            echo "changed_charts=${CHANGED_CHARTS[*]}" >> $GITHUB_OUTPUT
            echo "Charts changed: ${CHANGED_CHARTS[*]}"
          else
            echo "No charts changed"
          fi

          
      # - name: Run chart-releaser
      #   uses: helm/chart-releaser-action@v1.7.0
      #   id: chart_releaser
      #   with:
      #     config: .cr.yaml
      #     charts_dir: charts/cloud-security
      #   env:
      #     CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      #     CR_INDEX_PATH: ".cr-index/index.yaml"
      #     CR_PACKAGE_PATH: "./releases"
      #     CR_SKIP_EXISTING: "true"
      #     CR_PACKAGES_WITH_INDEX: "true"

      - name: Debug Outputs
        run: |
          echo "Released Charts: ${{ steps.chart_releaser.outputs.changed_charts }}"

      # Process released charts
      - name: Process Released Charts
        env:
          CHANGED_CHARTS: ${{ steps.chart_releaser.outputs.changed_charts }}
        run: |
          echo "Processing released charts..."
          if [ \"$CHANGED_CHARTS\" != \"\" ]; then
            git add releases/*
            helm repo index --merge index.yaml .
            cp -f index.yaml new_index.yaml
            git add new_index.yaml
            git commit -m "update new_index.yaml"
            git push
          fi
      - name: Install GitGuardian CLI
        if: steps.chart_releaser.outputs.changed_charts != ''
        run: |
          pip install ggshield

      - name: Extract and scan chart packages with GitGuardian
        if: steps.chart_releaser.outputs.changed_charts != ''
        run: |
          # Create directory for extracted charts
          mkdir -p ./extracted_charts

          # Find and extract all tgz files
          find ./releases -name "*.tgz" -exec tar -xzf {} -C ./extracted_charts \;

          # List extracted content for debugging
          ls -la ./extracted_charts

          # Scan the extracted content
          GITGUARDIAN_API_KEY=${{ secrets.GITGUARDIAN_API_KEY }} \
          ggshield secret scan path -y ./extracted_charts --recursive > scan_results.txt || true

          # Check if any secrets were found
          if grep -q "Incident" scan_results.txt; then
            echo "::error::GitGuardian found secrets in the chart packages. Aborting push."
            cat scan_results.txt
            exit 1
          fi
          echo "No secrets detected in chart packages. Proceeding with push."
          