name: Release Charts

on:
  push:
    branches:
      - test_releases
    paths:
      - 'charts/cloud-security/**'

jobs:
  release:
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Copy Existing releases
        run: |
          mkdir -p .cr-release-packages
          cp releases/*.tgz .cr-release-packages/

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        id: chart_releaser
        with:
          config: .cr.yaml
          charts_dir: charts/cloud-security
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_INDEX_PATH: ".cr-index/index.yaml"
          CR_PACKAGE_PATH: ".cr-release-packages"
          CR_SKIP_EXITING: "true"
          CR_PACKAGES_WITH_INDEX: "true"
      - name: Debug Outputs
        run: |
          echo "Released Charts: ${{ steps.chart_releaser.outputs.changed_charts }}"

      - name: Copy Released charts to releases folder
        run: |
          cp --update=none .cr-release-packages/*.tgz releases/

      # Process released charts
      - name: Process Released Charts
        run: |
          echo "Processing released charts..."
          for chart in ${{ steps.chart_releaser.outputs.changed_charts }}; do
            echo "changed chart: $chart"
            # Extract chart name and version from the Chart.yaml
            chart_name=$(yq '.name' $chart/Chart.yaml)
            chart_version=$(yq '.version' $chart/Chart.yaml)
            
            # Determine the expected package file
            package_file="${chart_name}-${chart_version}.tgz"
            echo "indexing chart: $package_file"
            helm repo index --merge index.yaml releases/$package_file
            git add releases/$package_file
          done
          cp -f index.yaml new_index.yaml
          git add new_index.yaml
          git commit -m "update new_index.yaml"
          git push